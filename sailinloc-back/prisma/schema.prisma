// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id           Int                   @id @default(autoincrement())
  nom          String
  prenom       String
  email        String               @unique
  motDePasse   String
  role         RoleUtilisateur

  proprietaire Proprietaire?
  reservations Reservation[]
  messagesEnvoyes   Message[]       @relation("MessagesEnvoyes")
  messagesRecus     Message[]       @relation("MessagesRecus")
  demandes     DemandeProprietaire[]
  medias            Media[] 
}

model Proprietaire {
  id             Int         @id @default(autoincrement())
  utilisateur    Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId  Int         @unique

  bateaux        Bateau[]
}

model Bateau {
  id              Int          @id @default(autoincrement())
  nom             String
  modele          String
  port            String
  prix            Decimal
  disponibilite   Boolean
  description     String
  proprietaire    Proprietaire @relation(fields: [proprietaireId], references: [id])
  proprietaireId  Int
  creeLe          DateTime     @default(now())

  reservations    Reservation[]
  assurances      Assurance[]
  messages        Message[]
  medias            Media[] 
}

model Reservation {
  id             Int         @id @default(autoincrement())
  utilisateur    Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId  Int
  bateau         Bateau      @relation(fields: [bateauId], references: [id])
  bateauId       Int
  dateDebut      DateTime
  dateFin        DateTime
  statut         StatutReservation
  creeLe         DateTime     @default(now())

  paiement       Paiement?
  contrat        Contrat?     @relation(name: "ContratToReservation")
  messages       Message[]
}

model Paiement {
  id               Int            @id @default(autoincrement())
  reservation      Reservation    @relation(fields: [reservationId], references: [id])
  reservationId    Int            @unique
  montant          Decimal
  methodePaiement  MethodePaiement
  creeLe           DateTime       @default(now())
}

model Contrat {
  id             Int         @id @default(autoincrement())
  reservation    Reservation @relation(name: "ContratToReservation", fields: [reservationId], references: [id])
  reservationId  Int         @unique
  montant        Decimal
  date           DateTime
  creeLe         DateTime    @default(now())

  medias            Media[] 
}

model Assurance {
  id             Int            @id @default(autoincrement())
  nom            String
  description    String
  montant        Decimal
  typeAssurance  TypeAssurance
  bateau         Bateau         @relation(fields: [bateauId], references: [id])
  bateauId       Int
  creeLe         DateTime       @default(now())

  medias            Media[] 
}

model Message {
  id              Int         @id @default(autoincrement())
  expediteur      Utilisateur @relation("MessagesEnvoyes", fields: [expediteurId], references: [id])
  expediteurId    Int
  destinataire    Utilisateur @relation("MessagesRecus", fields: [destinataireId], references: [id])
  destinataireId  Int
  reservation     Reservation? @relation(fields: [reservationId], references: [id])
  reservationId   Int?
  bateau          Bateau?      @relation(fields: [bateauId], references: [id])
  bateauId        Int?
  contenu         String
  dateEnvoi       DateTime
  creeLe          DateTime     @default(now())
}

model DemandeProprietaire {
  id               Int         @id @default(autoincrement())
  utilisateur      Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId    Int
  statut           StatutDemande
  dateDemande      DateTime
  dateTraitement   DateTime?

  medias            Media[] 
}

model Media {
  id           Int        @id @default(autoincrement())
  url          String
  type         TypeMedia
  titre        String?
  description  String?
  creeLe       DateTime   @default(now())

  utilisateur  Utilisateur? @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int?

  bateau       Bateau?      @relation(fields: [bateauId], references: [id])
  bateauId     Int?

  assurance    Assurance?   @relation(fields: [assuranceId], references: [id])
  assuranceId  Int?

  contrat      Contrat?     @relation(fields: [contratId], references: [id])
  contratId    Int?

  demandeProprietaire      DemandeProprietaire?     @relation(fields: [demandeProprietaireId], references: [id])
  demandeProprietaireId    Int?
}


enum RoleUtilisateur {
  CLIENT
  PROPRIETAIRE
}

enum StatutReservation {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
}

enum MethodePaiement {
  CARTE
  VIREMENT
  PAYPAL
}

enum TypeAssurance {
  RESPONSABILITE_CIVILE
  TOUS_RISQUES
}

enum StatutDemande {
  EN_ATTENTE
  ACCEPTEE
  REFUSEE
}

enum TypeMedia {
  IMAGE
  VIDEO
  DOCUMENT
}
